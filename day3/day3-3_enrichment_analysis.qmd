---
title: "Enrichment analysis"
editor_options: 
  chunk_output_type: console
---


## Material

{{< downloadthis ../assets/pdf/202503_enrichment_analysis.pdf dname="enrichment_analysis" label="Download the presentation" icon="filetype-pdf" >}}

- [MSigDB](http://www.gsea-msigdb.org/gsea/msigdb/index.jsp)
- `clusterProfiler` [vignette](https://bioconductor.org/packages/release/bioc/vignettes/clusterProfiler/inst/doc/clusterProfiler.html)
- [Revigo](http://revigo.irb.hr/)
- [Signaling Pathway Impact Analysis (SPIA)](https://bioconductor.org/packages/release/bioc/html/SPIA.html)
- Original [paper](https://www.pnas.org/content/102/43/15545) on GSEA
- [STRING](https://string-db.org/) for protein-protein interactions
- [GO figure!](https://gitlab.com/evogenlab/GO-Figure) for plotting GO terms and the associated [paper](https://www.frontiersin.org/articles/10.3389/fbinf.2021.638255/full)

## Exercises

```{r}
#| echo: false
#| output: false
tum_vs_norm <- readRDS("day3/tum_vs_norm_day3-2.rds")
limma_de <- readRDS("day3/limma_de_day3-2.rds")
proB <- readRDS("day3/proB_day3-2.rds")
```

Load the following packages:

```{r}
#| echo: false
#| output: false
library(clusterProfiler)
library(enrichplot)
```

If the `FindMarkers` or `FindAllMarkers` functions were used,
we obtained a table listing only the significant genes,
but we don't have any information of fold change for the non-significant
genes. Therefore, we can use the over-representation analysis
which is a threshold-based method.
Using our list of significant genes, we can test
if any gene set is over-represented among significant genes or not using a test
similar to a Fisher test to compare differences in proportions.

The `clusterProfiler` package provides functions for over-representation
analysis of Gene Ontology gene sets (among other functions, including functions for actual GSEA) or KEGG gene sets.

Genes can be labeled using different types of labels, eg
symbol, Ensembl ID, Entrez ID. To list the allowed
label types use:

```{r}
#| output: false
# BiocManager::install("org.Hs.eg.db", update = FALSE)
library(org.Hs.eg.db)
AnnotationDbi::keytypes(org.Hs.eg.db)
```

::: {.callout-info}
## About OrgDb
For other organisms, you can find available OrgDbs at [bioconductor](http://bioconductor.org/packages/release/BiocViews.html#___OrgDb)
:::

Let's select a set of genes that are downregulated in the tumor cells compared to normal:

```{r}
tum_down  <- subset(limma_de,
                    limma_de$logFC < -1 
                      & limma_de$adj.P.Val <  0.05)
tum_down_genes <- rownames(tum_down)
```

We can do a Gene Ontology term over-representation analysis based on this set of genes. Make sure you check out the help of this function to understand its arguments:

```{r}
#| eval: false
?enrichGO
```

```{r}
#| output: false
tum_vs_norm_go <- clusterProfiler::enrichGO(tum_down_genes,
                                            "org.Hs.eg.db",
                                            keyType = "SYMBOL",
                                            ont = "BP",
                                            minGSSize = 50)
```

The results are stored in the `@result` slot:

```{r}
#| eval: false
View(tum_vs_norm_go@result)
```

```{r}
#| echo: false
tum_vs_norm_go@result[, 1:7] |> head() |> knitr::kable()
```

::: {.callout-note}
## The columns `GeneRatio` and `BgRatio`
The columns `GeneRatio` and `BgRatio` that are in the `enrichResult` object represent the numbers that are used as input for the Fisher's exact test. 

The two numbers (M/N) in the `GeneRatio` column are:

* M: Number of genes of interest (in our case `tum_down_genes`) that are in the GO set
* N: Number of genes of interest with any GO annoation.

The two numbers (k/n) in the `BgRatio` column are:

* k: Number of genes in the universe that are in the GO set
* n: Number of genes in the universe with any GO annoation

A low p-value resulting from the Fisher's exact means that M/N is signficantly greater than k/n. 
:::

Some GO terms seem redundant because they contain many of the same genes, which is a characteristic of Gene Ontology gene sets. We can simplify this list by removing redundant gene sets:

```{r}
#| output: false
enr_go <- clusterProfiler::simplify(tum_vs_norm_go)
```

```{r}
#| eval: false
View(enr_go@result)
```

```{r}
#| echo: false
enr_go@result[, 1:7] |> head() |> knitr::kable()
```

We can quite easily generate a plot called an enrichment map with the `enrichplot` package:

```{r}
enrichplot::emapplot(enrichplot::pairwise_termsim(enr_go),
                     showCategory = 30)
```

Instead of testing for Gene Ontology terms, we can also test for other gene set collections. For example the Hallmark collection from [MSigDB](http://www.gsea-msigdb.org/gsea/msigdb/index.jsp):

```{r}
library(msigdbr)
library(msigdbdf)
gmt <- msigdbr::msigdbr(species = "human", category = "H")
```

We can use the function `enricher` to test for over-representation of any set of genes of the Hallmark collection. We have to include the "universe", i.e. the full list of background, non significant genes, against which to test for differences in proportions:

```{r}
#| output: false
tum_vs_norm_enrich <- clusterProfiler::enricher(gene = tum_down_genes,
                                                universe = rownames(proB),
                                                pAdjustMethod = "BH",
                                                pvalueCutoff  = 0.05,
                                                qvalueCutoff  = 0.05,
                                                TERM2GENE = gmt[,c("gs_name", "gene_symbol")])
```

When using the genes down-regulated in tumor, among the over-represented Hallmark gene sets, we have `HALLMARK_G2M_CHECKPOINT`, which includes genes involved in the G2/M checkpoint in the progression through the cell division cycle.

```{r}
#| eval: false
View(tum_vs_norm_enrich@result[tum_vs_norm_enrich@result$p.adjust < 0.05,])
```

```{r}
#| echo: false

tum_vs_norm_enrich@result[tum_vs_norm_enrich@result$p.adjust < 0.05, 1:7] |> 
  head() |> 
  knitr::kable()

```

### Clear environment

Clear your environment:

```{r}
#| eval: false
rm(list = ls())
gc()
.rs.restartR()
```
