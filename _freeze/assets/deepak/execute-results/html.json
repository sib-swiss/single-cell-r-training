{
  "hash": "89263cb70252f9dd9f6b17a6a60666aa",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"deepak\"\neditor: visual\neditor_options: \n  chunk_output_type: console\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(dplyr)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'dplyr'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(Seurat)  # If using Seurat objects\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: SeuratObject\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: sp\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n'SeuratObject' was built under R 4.4.0 but the current version is\n4.4.3; it is recomended that you reinstall 'SeuratObject' as the ABI\nfor R may have changed\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n'SeuratObject' was built with package 'Matrix' 1.7.0 but the current\nversion is 1.7.2; it is recomended that you reinstall 'SeuratObject' as\nthe ABI for 'Matrix' may have changed\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'SeuratObject'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:base':\n\n    intersect, t\n```\n\n\n:::\n\n```{.r .cell-code}\n# Simulated example data: Unnormalized counts for 3 genes across 3 cell types\nset.seed(42)\nsc_data <- data.frame(\n  Gene = rep(c(\"Gene1\", \"Gene2\", \"Gene3\"), each = 30),\n  Expression = c(rpois(30, lambda = 10), rpois(30, lambda = 20), rpois(30, lambda = 5)),\n  CellType = rep(c(\"A\", \"B\", \"C\"), times = 30)\n)\n\n# Violin + Jitter Plot\nggplot(sc_data, aes(x = CellType, y = Expression, fill = CellType)) +\n  geom_violin(trim = FALSE, alpha = 0.6) +  # Show expression distribution\n  geom_jitter(width = 0.2, alpha = 0.5, color = \"black\") +  # Add individual points\n  facet_wrap(~ Gene) +  # Separate plots for each gene\n  theme_minimal() +\n  labs(title = \"Unnormalized Single-Cell RNA-seq Data\", \n       x = \"Cell Type\", \n       y = \"Raw Expression Counts\") +\n  theme(legend.position = \"none\")\n```\n\n::: {.cell-output-display}\n![](deepak_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(Seurat)\n\n# Simulated example data: Log-normalized expression for 3 genes across 3 cell types\nset.seed(42)\nsc_data_norm <- data.frame(\n  Gene = rep(c(\"Gene1\", \"Gene2\", \"Gene3\"), each = 30),\n  Expression = log1p(c(rpois(30, lambda = 10), rpois(30, lambda = 20), rpois(30, lambda = 5))),\n  CellType = rep(c(\"A\", \"B\", \"C\"), times = 30)\n)\n\n# Violin + Jitter Plot for Normalized Data\nggplot(sc_data_norm, aes(x = CellType, y = Expression, fill = CellType)) +\n  geom_violin(trim = FALSE, alpha = 0.6) +  # Show distribution\n  geom_jitter(width = 0.2, alpha = 0.5, color = \"black\") +  # Add individual points\n  facet_wrap(~ Gene) +  # Separate plots for each gene\n  theme_minimal() +\n  labs(title = \"Normalized Single-Cell RNA-seq Data\", \n       x = \"Cell Type\", \n       y = \"Log1p Normalized Expression\") +\n  theme(legend.position = \"none\")\n```\n\n::: {.cell-output-display}\n![](deepak_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load required libraries\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(R6)\n\n# Define scRNASeqVisualizer class\nscRNASeqVisualizer <- R6Class(\"scRNASeqVisualizer\",\n  public = list(\n    data = NULL,\n\n    initialize = function(data) {\n      self$data <- data\n    },\n\n    plot_raw_counts = function() {\n      ggplot(self$data, aes(x = CellType, y = RawCounts, fill = CellType)) +\n        geom_violin() +\n        geom_jitter(width = 0.2, alpha = 0.6) +\n        facet_wrap(~ Gene) +\n        labs(title = \"Unnormalized Single-Cell RNA-seq Data\",\n             y = \"Raw Expression Counts\",\n             x = \"Cell Type\") +\n        theme_minimal()\n    },\n\n    plot_log_normalized = function() {\n      ggplot(self$data, aes(x = CellType, y = LogNormalized, fill = CellType)) +\n        geom_violin() +\n        geom_jitter(width = 0.2, alpha = 0.6) +\n        facet_wrap(~ Gene) +\n        labs(title = \"Normalized Single-Cell RNA-seq Data\",\n             y = \"Log1p Normalized Expression\",\n             x = \"Cell Type\") +\n        theme_minimal()\n    },\n\n    plot_scaling_effect = function() {\n      ggplot(self$data, aes(x = CellIndex, y = TotalTranscripts, fill = \"blue\")) +\n        geom_bar(stat = \"identity\") +\n        facet_wrap(~ ScalingStage, scales = \"free_y\") +\n        labs(title = \"Scaling Normalization: Before and After\",\n             y = \"# Transcripts Detected\",\n             x = \"Cell Index\") +\n        theme_minimal() +\n        theme(legend.position = \"none\")\n    }\n  )\n)\n\n# Simulate scRNA-seq data\nset.seed(42)\ndf <- data.frame(\n  CellIndex = rep(1:3000, 2),\n  TotalTranscripts = c(rpois(3000, lambda = 8000), rep(8000, 3000)),\n  ScalingStage = rep(c(\"Before Scaling\", \"After Scaling\"), each = 3000)\n)\n\ndf_violin <- expand.grid(\n  CellType = c(\"A\", \"B\", \"C\"),\n  Gene = c(\"Gene1\", \"Gene2\", \"Gene3\"),\n  CellIndex = 1:20\n) %>%\n  mutate(RawCounts = rpois(n(), lambda = 15),\n         LogNormalized = log1p(RawCounts))\n\n# Create an instance of the class\nvisualizer <- scRNASeqVisualizer$new(df_violin)\n\n# Plot each figure\nplot1 <- visualizer$plot_raw_counts()\nplot2 <- visualizer$plot_log_normalized()\n\n# Create an instance for scaling visualization\nvisualizer_scaling <- scRNASeqVisualizer$new(df)\nplot3 <- visualizer_scaling$plot_scaling_effect()\n\n# Display plots\nprint(plot1) # Unnormalized data\n```\n\n::: {.cell-output-display}\n![](deepak_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n\n```{.r .cell-code}\nprint(plot2) # Log normalized data\n```\n\n::: {.cell-output-display}\n![](deepak_files/figure-html/unnamed-chunk-3-2.png){width=672}\n:::\n\n```{.r .cell-code}\nprint(plot3) # Scaling effect\n```\n\n::: {.cell-output-display}\n![](deepak_files/figure-html/unnamed-chunk-3-3.png){width=672}\n:::\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}