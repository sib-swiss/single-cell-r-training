{
  "hash": "bd753b5772048d20f94ab563c919c0f5",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"deepak\"\neditor: source\nexecute:\n  eval: false\neditor_options: \n  chunk_output_type: console\n---\n\n\n\n\n# Normalized example\n\n## Raw counts\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(Seurat)  # If using Seurat objects\n\n# Simulated example data: Unnormalized counts for 3 genes across 3 cell types\nset.seed(42)\nsc_data <- data.frame(\n  Gene = rep(c(\"Gene1\", \"Gene2\", \"Gene3\"), each = 30),\n  Expression = c(rpois(30, lambda = 10), rpois(30, lambda = 20), rpois(30, lambda = 5)),\n  CellType = rep(c(\"A\", \"B\", \"C\"), times = 30)\n)\n\n# Violin + Jitter Plot\nggplot(sc_data, aes(x = CellType, y = Expression, fill = CellType)) +\n  geom_violin(trim = FALSE, alpha = 0.6) +  # Show expression distribution\n  geom_jitter(width = 0.2, alpha = 0.5, color = \"black\") +  # Add individual points\n  facet_wrap(~ Gene) +  # Separate plots for each gene\n  theme_bw() +\n  labs(title = \"Unnormalized Single-Cell RNA-seq Data\", \n       x = \"Cell Type\", \n       y = \"Raw Expression Counts\") +\n  theme(legend.position = \"none\")\n```\n:::\n\n\n\n\n\n## Log1p\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(Seurat)\n\n# Simulated example data: Log-normalized expression for 3 genes across 3 cell types\nset.seed(42)\nsc_data_norm <- data.frame(\n  Gene = rep(c(\"Gene1\", \"Gene2\", \"Gene3\"), each = 30),\n  Expression = log1p(c(rpois(30, lambda = 10), rpois(30, lambda = 20), rpois(30, lambda = 5))),\n  CellType = rep(c(\"A\", \"B\", \"C\"), times = 30)\n)\n\n# Violin + Jitter Plot for Normalized Data\nggplot(sc_data_norm, aes(x = CellType, y = Expression, fill = CellType)) +\n  geom_violin(trim = FALSE, alpha = 0.6) +  # Show distribution\n  geom_jitter(width = 0.2, alpha = 0.5, color = \"black\") +  # Add individual points\n  facet_wrap(~ Gene) +  # Separate plots for each gene\n  theme_bw() +\n  labs(title = \"Normalized Single-Cell RNA-seq Data\", \n       x = \"Cell Type\", \n       y = \"Log1p Normalized Expression\") +\n  theme(legend.position = \"none\")\n```\n:::\n\n\n\n\n\n# Raw vs scaled\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(tidyr)\n\n# Simulating data\nset.seed(42)\ncells <- 1:3000\ntranscripts_raw <- sample(5000:15000, 3000, replace = TRUE)\n\n# Scaling (e.g., normalizing each cell to a fixed total count)\nscaling_factor <- mean(transcripts_raw)\ntranscripts_scaled <- transcripts_raw / transcripts_raw * scaling_factor\n\n# Creating dataframe\ndf <- data.frame(\n  Cell_Index = rep(cells, 2),\n  Transcripts = c(transcripts_raw, transcripts_scaled),\n  Condition = rep(c(\"Raw\", \"Scaled\"), each = 3000)\n)\n\n# Plot\nggplot(df, aes(x = Cell_Index, y = Transcripts)) +\n  geom_bar(stat = \"identity\", width = 0.7, fill = \"blue\") +\n  facet_wrap(~Condition, scales = \"free_y\") +\n  labs(x = \"Cell index\", y = \"# Transcripts detected\") +\n  theme_bw()\n```\n:::\n\n\n\n\n\n# Technical vs biological difference\n\n## Scatter plot\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(dplyr)\n\nset.seed(42)\n\n# Simulating single-cell gene expression data\ncells <- 1:300\ntrue_expression <- rnorm(300, mean = 10, sd = 2)  # Biological variation\ntechnical_noise <- rnorm(300, mean = 0, sd = 1)   # Technical noise\nobserved_expression <- true_expression + technical_noise  # Total observed expression\n\n# Creating a dataframe\ndf <- data.frame(\n  CellIndex = cells,\n  ObservedExpression = observed_expression,\n  TrueExpression = true_expression,\n  TechnicalNoise = technical_noise\n)\n\n# Plot\nggplot(df, aes(x = CellIndex)) +\n  geom_point(aes(y = ObservedExpression, color = \"Observed Expression\"), size = 2, alpha = 0.7) +\n  geom_point(aes(y = TrueExpression, color = \"True Expression\"), size = 2, alpha = 0.7) +\n  geom_point(aes(y = TechnicalNoise + min(ObservedExpression), color = \"Technical Noise\"), size = 2, alpha = 0.7) +\n  scale_color_manual(values = c(\"Observed Expression\" = \"#1f78b4\",  # Dark blue\n                                \"True Expression\" = \"#33a02c\",      # Teal\n                                \"Technical Noise\" = \"#e66101\")) +   # Dark orange\n  labs(x = \"Cell index\", y = \"Gene expression level\", color = \"Legend\") +\n  theme_minimal()\n```\n:::\n\n\n\n\n\n## Density plot\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(dplyr)\n\nset.seed(42)\n\n# Simulating single-cell gene expression data\ncells <- 1:300\ntrue_expression <- rnorm(300, mean = 10, sd = 2)  # Biological variation\ntechnical_noise <- rnorm(300, mean = 0, sd = 1)   # Technical noise\nobserved_expression <- true_expression + technical_noise  # Total observed expression\n\n# Creating a dataframe\ndf <- data.frame(\n  CellIndex = cells,\n  ObservedExpression = observed_expression,\n  TrueExpression = true_expression,\n  TechnicalNoise = technical_noise\n)\n\n# Convert to long format for ggplot\ndf_long <- df %>%\n  tidyr::pivot_longer(cols = c(ObservedExpression, TrueExpression, TechnicalNoise),\n                      names_to = \"ExpressionType\", values_to = \"ExpressionValue\")\n\n# Density Plot\nggplot(df_long, aes(x = ExpressionValue, fill = ExpressionType)) +\n  geom_density(alpha = 0.6) +\n  scale_fill_manual(values = c(\"ObservedExpression\" = \"#1f78b4\",  # Dark blue\n                               \"TrueExpression\" = \"#33a02c\",      # Teal\n                               \"TechnicalNoise\" = \"#e66101\")) +   # Dark orange\n  labs(x = \"Gene expression level\", y = \"Density\", fill = \"Legend\") +\n  theme_minimal()\n```\n:::\n\n\n\n\n\n# Transformations\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load required libraries\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(patchwork)\n\n# Create the expanded dataset with more genes\ngenes <- c(\"Gene 1\", \"Gene 1\", \"Gene 2\", \"Gene 2\", \"Gene 3\", \"Gene 3\", \"Gene 4\", \"Gene 4\", \"Gene 5\", \"Gene 5\")\ncell_types <- c(rep(c(\"Cell Type A\", \"Cell Type B\"), 5))\nraw_values <- c(1, 2, 100, 200, 5, 25, 400, 800, 10, 60)\n\n# Create a data frame\ndata <- data.frame(\n  Gene = genes,\n  CellType = cell_types,\n  RawValue = raw_values\n)\n\n# Add the transformations\ndata <- data %>%\n  mutate(\n    LogValue = log2(RawValue),\n    SqrtValue = sqrt(RawValue)\n  )\n\n# Calculate the differences for each transformation type\nraw_diff <- data %>%\n  group_by(Gene) %>%\n  summarize(Delta = diff(RawValue))\n\nlog_diff <- data %>%\n  group_by(Gene) %>%\n  summarize(Delta = diff(LogValue))\n\nsqrt_diff <- data %>%\n  group_by(Gene) %>%\n  summarize(Delta = diff(SqrtValue))\n\n# Create tables for visualization\n# Raw data table\nraw_table <- data %>%\n  select(Gene, CellType, RawValue) %>%\n  pivot_wider(names_from = CellType, values_from = RawValue) %>%\n  left_join(raw_diff, by = \"Gene\") %>%\n  rename(`Cell Type A` = `Cell Type A`, `Cell Type B` = `Cell Type B`, `Δ` = Delta)\n\n# Log transform table\nlog_table <- data %>%\n  select(Gene, CellType, LogValue) %>%\n  pivot_wider(names_from = CellType, values_from = LogValue) %>%\n  left_join(log_diff, by = \"Gene\") %>%\n  rename(`Cell Type A` = `Cell Type A`, `Cell Type B` = `Cell Type B`, `Δ` = Delta)\n\n# Square root transform table\nsqrt_table <- data %>%\n  select(Gene, CellType, SqrtValue) %>%\n  pivot_wider(names_from = CellType, values_from = SqrtValue) %>%\n  left_join(sqrt_diff, by = \"Gene\") %>%\n  rename(`Cell Type A` = `Cell Type A`, `Cell Type B` = `Cell Type B`, `Δ` = Delta)\n\n# Format the tables for display\nformat_table <- function(tbl) {\n  tbl_fmt <- tbl\n  for (col in c(\"Cell Type A\", \"Cell Type B\", \"Δ\")) {\n    if (is.numeric(tbl[[col]])) {\n      # Format to 2 decimal places\n      tbl_fmt[[col]] <- format(round(tbl[[col]], 2), nsmall = 2)\n      # For raw data table, remove decimal places for integer values\n      if (all(tbl[[col]] == round(tbl[[col]]))) {\n        tbl_fmt[[col]] <- as.character(round(tbl[[col]]))\n      }\n    }\n  }\n  return(tbl_fmt)\n}\n\nraw_table_fmt <- format_table(raw_table)\nlog_table_fmt <- format_table(log_table)\nsqrt_table_fmt <- format_table(sqrt_table)\n\n# Function to create table visualization using ggplot2\ncreate_ggplot_table <- function(data_table, title, fill_color) {\n  # Add a row number column for y-position\n  data_table$row_num <- nrow(data_table):1\n  \n  # Create data frames for different parts of the visualization\n  # Cell values data\n  plot_data <- data_table %>%\n    tidyr::pivot_longer(cols = c(`Cell Type A`, `Cell Type B`, `Δ`),\n                  names_to = \"column\", values_to = \"value\") %>%\n    mutate(x_pos = case_when(\n      column == \"Cell Type A\" ~ 1,\n      column == \"Cell Type B\" ~ 2,\n      column == \"Δ\" ~ 3\n    ))\n  \n  # Column headers data\n  header_data <- data.frame(\n    x_pos = 1:3,\n    y_pos = nrow(data_table) + 1,\n    label = c(\"Cell Type A\", \"Cell Type B\", \"Δ\")\n  )\n  \n  # Row labels (gene names)\n  row_labels <- data.frame(\n    x_pos = 0.6,\n    y_pos = data_table$row_num,\n    label = data_table$Gene\n  )\n  \n  # Create the plot\n  p <- ggplot() +\n    # Cell backgrounds\n    geom_tile(data = plot_data, aes(x = x_pos, y = row_num), \n              fill = \"#E6F3FF\", color = \"white\", width = 0.95, height = 0.95) +\n    # Header backgrounds\n    geom_tile(data = header_data, aes(x = x_pos, y = y_pos), \n              fill = fill_color, color = \"white\", width = 0.95, height = 0.95) +\n    # Cell values\n    geom_text(data = plot_data, aes(x = x_pos, y = row_num, label = value), \n              size = 4.5) +\n    # Header labels\n    geom_text(data = header_data, aes(x = x_pos, y = y_pos, label = label), \n              size = 4.5, fontface = \"bold\", color = \"white\") +\n    # Row labels (gene names)\n    geom_text(data = row_labels, aes(x = x_pos, y = y_pos, label = label), \n              size = 4.5, hjust = 1, nudge_x = -0.1) +\n    # Formatting\n    scale_x_continuous(limits = c(-0.5, 3.5), expand = c(0, 0)) +\n    scale_y_continuous(limits = c(0.5, nrow(data_table) + 1.5), expand = c(0, 0)) +\n    labs(title = title) +\n    theme_void() +\n    theme(\n      plot.title = element_text(size = 15, color = \"black\", hjust = 0.5),\n      plot.margin = margin(10, 10, 10, 30)\n    )\n  \n  return(p)\n}\n\n# Create the ggplots\ngg_raw <- create_ggplot_table(data_table = raw_table_fmt, title = \"Raw data\", fill_color = \"#6BAED6\")\ngg_log <- create_ggplot_table(log_table_fmt, expression(paste(\"Log\"[2], \" transform\")), \"#FFC857\")\ngg_sqrt <- create_ggplot_table(sqrt_table_fmt, \"Square root transform\", \"#8BBF74\")\n\n# Combine the plots using patchwork\ncombined_plot <- gg_raw + gg_log + gg_sqrt + \n  plot_layout(widths = c(1, 1, 1)) +\n  plot_annotation(\n    title = \"How do different transformations affect true biological differences?\",\n    theme = theme(plot.title = element_text(size = 16, face = \"bold\", hjust = 0.5))\n  )\n\n# Display the plot when running in an interactive session\nprint(combined_plot)\n```\n:::\n\n\n\n\n## Pearson\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load required libraries\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(patchwork)\n\n# Create the expanded dataset with more genes\ngenes <- c(\"Gene 1\", \"Gene 1\", \"Gene 2\", \"Gene 2\", \"Gene 3\", \"Gene 3\", \"Gene 4\", \"Gene 4\", \"Gene 5\", \"Gene 5\")\ncell_types <- c(rep(c(\"Cell Type A\", \"Cell Type B\"), 5))\nraw_values <- c(1, 2, 100, 200, 5, 25, 400, 800, 10, 60)\n\n# Create a data frame\ndata <- data.frame(\n  Gene = genes,\n  CellType = cell_types,\n  RawValue = raw_values\n)\n\n# Add transformations\ndata <- data %>%\n  mutate(\n    LogValue = log2(RawValue),\n    SqrtValue = sqrt(RawValue)\n  )\n\n# Compute expected values based on 75%-25% weightage\nexpected_values <- data %>%\n  group_by(Gene) %>%\n  summarise(Expected_A = 0.75 * sum(RawValue),\n            Expected_B = 0.25 * sum(RawValue))\n\n# Merge expected values\ndata <- data %>%\n  left_join(expected_values, by = \"Gene\") %>%\n  mutate(Expected = ifelse(CellType == \"Cell Type A\", Expected_A, Expected_B)) %>%\n  mutate(PearsonResidual = (RawValue - Expected) / sqrt(Expected))\n\n# Compute differences\nraw_diff <- data %>%\n  group_by(Gene) %>%\n  summarize(Delta_Raw = diff(RawValue))\n\nlog_diff <- data %>%\n  group_by(Gene) %>%\n  summarize(Delta_Log = diff(LogValue))\n\nsqrt_diff <- data %>%\n  group_by(Gene) %>%\n  summarize(Delta_Sqrt = diff(SqrtValue))\n\npearson_diff <- data %>%\n  group_by(Gene) %>%\n  summarize(Delta_Pearson = diff(PearsonResidual))\n\n# Function to create ggplot tables with percentages\ncreate_ggplot_table <- function(data_table, title, fill_color, percentage) {\n  data_table$row_num <- nrow(data_table):1\n  plot_data <- data_table %>%\n    tidyr::pivot_longer(cols = c(`Cell Type A`, `Cell Type B`, `Δ`),\n                  names_to = \"column\", values_to = \"value\") %>%\n    mutate(x_pos = case_when(\n      column == \"Cell Type A\" ~ 1,\n      column == \"Cell Type B\" ~ 2,\n      column == \"Δ\" ~ 3\n    ))\n  \n  header_data <- data.frame(\n    x_pos = 1:3,\n    y_pos = nrow(data_table) + 1,\n    label = c(\"Cell Type A\", \"Cell Type B\", \"Δ\")\n  )\n  \n  row_labels <- data.frame(\n    x_pos = 0.6,\n    y_pos = data_table$row_num,\n    label = data_table$Gene\n  )\n  \n  ggplot() +\n    geom_tile(data = plot_data, aes(x = x_pos, y = row_num), \n              fill = \"#E6F3FF\", color = \"white\", width = 0.95, height = 0.95) +\n    geom_tile(data = header_data, aes(x = x_pos, y = y_pos), \n              fill = fill_color, color = \"white\", width = 0.95, height = 0.95) +\n    geom_text(data = plot_data, aes(x = x_pos, y = row_num, label = value), size = 4.5) +\n    geom_text(data = header_data, aes(x = x_pos, y = y_pos, label = label),\n              size = 4.5, fontface = \"bold\", color = \"white\") +\n    geom_text(data = row_labels, aes(x = x_pos, y = y_pos, label = label),\n              size = 4.5, hjust = 1, nudge_x = -0.1) +\n    annotate(\"text\", x = 2, y = nrow(data_table) + 2, label = percentage, size = 5, fontface = \"bold\") +\n    scale_x_continuous(limits = c(-0.5, 3.5), expand = c(0, 0)) +\n    scale_y_continuous(limits = c(0.5, nrow(data_table) + 2.5), expand = c(0, 0)) +\n    labs(title = title) +\n    theme_void() +\n    theme(plot.title = element_text(size = 15, color = \"black\", hjust = 0.5))\n}\n\n# Create the ggplots with percentage annotation\ngg_raw <- create_ggplot_table(raw_table_fmt, \"Raw data\", \"#6BAED6\", \"Cell A: 75%, Cell B: 25%\")\ngg_log <- create_ggplot_table(log_table_fmt, \"Log transform\", \"#FFC857\", \"Cell A: 75%, Cell B: 25%\")\ngg_sqrt <- create_ggplot_table(sqrt_table_fmt, \"Square root transform\", \"#8BBF74\", \"Cell A: 75%, Cell B: 25%\")\ngg_pearson <- create_ggplot_table(pearson_table_fmt, \"Pearson Residuals\", \"#D95F02\", \"Cell A: 75%, Cell B: 25%\")\n\n# Combine the plots\ncombined_plot <- gg_raw + gg_log + gg_sqrt + gg_pearson +\n  plot_layout(widths = c(1, 1, 1, 1)) +\n  plot_annotation(\n    title = \"Comparison of Transformations\",\n    theme = theme(plot.title = element_text(size = 16, face = \"bold\", hjust = 0.5))\n  )\n\n# Display the plot\nprint(combined_plot)\n```\n:::\n\n\n\n\n\n\n# How scTransform work??\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(gt)\n```\n:::\n\n\n\n\n\n## Example Dataset with Percentages\n- **Cell Type A (50%)**\n- **Cell Type B (50%)**\n  - **Subtype A (48%)**\n  - **Subtype B (2%)**\n\n\n## Create Raw Counts Table\nCreate a table for the raw counts, including subtypes.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nraw_counts <- data.frame(\n  Gene = c(\"Gene1\", \"Gene2\", \"Gene3\", \"Gene4\", \"Gene5\"),\n  Cell_Type_A = c(20, 10, 5, 12, 18),\n  Cell_Type_B_Subtype_A = c(15, 8, 3, 9, 14),\n  Cell_Type_B_Subtype_B = c(5, 2, 1, 3, 4)\n)\n\ngt(raw_counts) %>%\n  tab_header(\n    title = \"Raw Counts\"\n  ) %>%\n  data_color(\n    columns = c(Cell_Type_A, Cell_Type_B_Subtype_A, Cell_Type_B_Subtype_B),\n    colors = scales::col_numeric(\n      palette = c(\"lightblue\", \"darkblue\"),\n      domain = NULL\n    )\n  )\n```\n:::\n\n\n\n\n## Create Library Size Table\nCalculate and create a table for the library size with color.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary_size <- data.frame(\n  Cell_Type = c(\"Cell_Type_A\", \"Cell_Type_B_Subtype_A\", \"Cell_Type_B_Subtype_B\"),\n  Library_Size = c(sum(raw_counts$Cell_Type_A), sum(raw_counts$Cell_Type_B_Subtype_A), sum(raw_counts$Cell_Type_B_Subtype_B))\n)\n\ngt(library_size) %>%\n  tab_header(\n    title = \"Library Size\"\n  ) %>%\n  data_color(\n    columns = vars(Library_Size),\n    colors = scales::col_numeric(\n      palette = c(\"lightgreen\", \"darkgreen\"),\n      domain = NULL\n    )\n  )\n```\n:::\n\n\n\n\n## Create Gene Means and Variances Table\nCalculate and create a table for gene means and variances with color.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngene_stats <- data.frame(\n  Gene = raw_counts$Gene,\n  Mean = rowMeans(raw_counts[, -1]),\n  Variance = apply(raw_counts[, -1], 1, var)\n)\n\ngt(gene_stats) %>%\n  tab_header(\n    title = \"Gene Means and Variances\"\n  ) %>%\n  data_color(\n    columns = vars(Mean, Variance),\n    colors = scales::col_numeric(\n      palette = c(\"lightcoral\", \"darkred\"),\n      domain = NULL\n    )\n  )\n```\n:::\n\n\n\n\n## Create Log-Transformed and Centered Data Table\nLog-transform and center the data, then create a table with color.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlog_transformed <- data.frame(\n  Gene = raw_counts$Gene,\n  Cell_Type_A_log = log1p(raw_counts$Cell_Type_A),\n  Cell_Type_B_Subtype_A_log = log1p(raw_counts$Cell_Type_B_Subtype_A),\n  Cell_Type_B_Subtype_B_log = log1p(raw_counts$Cell_Type_B_Subtype_B)\n)\n\ngt(log_transformed) %>%\n  tab_header(\n    title = \"Log-Transformed and Centered Data\"\n  ) %>%\n  data_color(\n    columns = vars(Cell_Type_A_log, Cell_Type_B_Subtype_A_log, Cell_Type_B_Subtype_B_log),\n    colors = scales::col_numeric(\n      palette = c(\"lightyellow\", \"darkorange\"),\n      domain = NULL\n    )\n  )\n```\n:::\n\n\n\n\n## Create Variance Stabilized Data Table\nApply variance stabilization and create a table with color.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnormalized_data <- data.frame(\n  Gene = raw_counts$Gene,\n  Cell_Type_A_normalized = scale(log_transformed$Cell_Type_A_log),\n  Cell_Type_B_Subtype_A_normalized = scale(log_transformed$Cell_Type_B_Subtype_A_log),\n  Cell_Type_B_Subtype_B_normalized = scale(log_transformed$Cell_Type_B_Subtype_B_log)\n)\n\ngt(normalized_data) %>%\n  tab_header(\n    title = \"Variance Stabilized Data\"\n  ) %>%\n  data_color(\n    columns = vars(Cell_Type_A_normalized, Cell_Type_B_Subtype_A_normalized, Cell_Type_B_Subtype_B_normalized),\n    colors = scales::col_numeric(\n      palette = c(\"lightpurple\", \"darkpurple\"),\n      domain = NULL\n    )\n  )\n```\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}