{
  "hash": "97a21e0d05a7d50d0e0721ed634a0db6",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Cell annotation\"\neditor_options: \n  chunk_output_type: console\n---\n\n\n\n\n\n\n## Material\n\n\n\n\n{{< downloadthis ../assets/pdf/CellAnnotation_SIB.pdf dname=\"CellAnnotation_SIB\" label=\"Download the presentation\" icon=\"filetype-pdf\" >}}\n\n\n{{< video https://youtu.be/dNO7W7qkKBM?si=xkLBHjT8V25AEzIx >}}\n\n\n\n\n\n\n{{< downloadthis ../assets/pdf/cell_type_annotation.pdf dname=\"cell_type_annotation\" label=\"Download the presentation from the video\" icon=\"filetype-pdf\" >}\n\n- [Review on automated cell annotation](https://www.sciencedirect.com/science/article/pii/S2001037021000192)\n\n## Exercises\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\nLoad the following packages:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(celldex)\nlibrary(SingleR)\n```\n:::\n\n\n\n\nIn the last exercise we saw that probably clustering at a resolution of 0.3 gave the most sensible results. Let's therefore set the default identity of each cell based on this clustering:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nseu <- Seurat::SetIdent(seu, value = seu$RNA_snn_res.0.3)\n```\n:::\n\n\n\n\n::: {.callout-note}\nFrom now on, grouping (e.g. for plotting) is done by the active identity (set at `@active.ident`) by default.\n:::\n\nDuring cell annotation we will use the original count data (not the integrated data):\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nDefaultAssay(seu) <- \"RNA\"\n```\n:::\n\n\n\n\n\nBased on the UMAP we have generated, we can visualize expression for a gene in each cluster:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nSeurat::FeaturePlot(seu, \"HBA1\")\n```\n:::\n\n\n\n\nBased on expression of sets of genes you can do a manual cell type annotation. If you know the marker genes for some cell types, you can check whether they are up-regulated in one or the other cluster. Here we have some marker genes for two different cell types:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntcell_genes <- c(\"IL7R\", \"LTB\", \"TRAC\", \"CD3D\")\nmonocyte_genes <- c(\"CD14\", \"CST3\", \"CD68\", \"CTSS\")\n```\n:::\n\n\n\n\nLet's have a look at the expression of the four T cell genes:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nSeurat::FeaturePlot(seu, tcell_genes, ncol=2)\n```\n:::\n\n\n\n\nThese cells are almost all in cluster 0 and 8. Which becomes clearer when looking at the violin plot:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nSeurat::VlnPlot(seu,\n                features = tcell_genes,\n                ncol = 2)\n```\n:::\n\n\n\n\n::: {.callout-important}\n## Exercise\nHave a look at the monocyte genes as well. Which clusters contain probably monocytes?\n:::\n\n::: {.callout-tip collapse=\"true\"}\n## Answer\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nSeurat::FeaturePlot(seu, monocyte_genes, ncol=2)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nSeurat::VlnPlot(seu,\n                features = monocyte_genes,\n                ncol = 2)\n```\n:::\n\n\n\n\n:::\n\nWe can also automate this with the function `AddModuleScore`. For each cell, an expression score for a group of genes is calculated:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nseu <- Seurat::AddModuleScore(seu,\n                              features = list(tcell_genes),\n                              name = \"tcell_genes\")\n```\n:::\n\n\n\n\n::: {.callout-important}\n## Exercise\nAfter running `AddModuleScore`, a column was added to `seu@meta.data`.\n\n**A.** What is the name of that column? What kind of data is in there?\n\n**B.** Generate a UMAP with color accoding to this column and a violinplot grouped by cluster. Is this according to what we saw in the previous exercise?\n\n:::\n\n::: {.callout-tip collapse=\"true\"}\n## Answer\n**A.** The new column is called `tcell_genes1`. It contains the module score for each cell (which is basically the average expression of the set of genes).\n\n**B.** You can plot the UMAP with\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nSeurat::FeaturePlot(seu, \"tcell_genes1\")\n```\n:::\n\n\n\n\nWhich indeed shows these genes are mainly expressed in clusters 0 and 8:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nSeurat::VlnPlot(seu,\n                \"tcell_genes1\")\n```\n:::\n\n\n\n\n:::\n\n### Annotating cells according to cycling phase\n\nBased on the same principle, we can also annotate cell cycling state. The function `CellCycleScore` uses `AddModuleScore` to get a score for the G2/M and S phase (the mitotic phases in which cell is cycling). In addition, `CellCycleScore` assigns each cell to either the G2/M, S or G1 phase. \n\nFirst  we extract the built-in genes for cell cycling:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ns.genes <- Seurat::cc.genes.updated.2019$s.genes\ng2m.genes <- Seurat::cc.genes.updated.2019$g2m.genes\n```\n:::\n\n\n\n\nNow we run the function:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nseu <- Seurat::CellCycleScoring(seu,\n                                s.features = s.genes,\n                                g2m.features = g2m.genes)\n```\n:::\n\n\n\n\nAnd we can visualize the annotations:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nSeurat::DimPlot(seu, group.by = \"Phase\")\n```\n:::\n\n\n\n\nBased on your application, you can try to regress out the cell cycling scores at the step of scaling. Reasons for doing that could be:\n\n- Merging cycling and non-cycling cells of the same type in one cluster\n- Merging G2/M and S phase in one cluster\n\n::: {.callout-note}\nNote that correcting for cell cycling is performed at the scaling step. It will therefore only influence analyses that use scaled data, like dimensionality reduction and clustering. For e.g. differential gene expression testing, we use the raw original counts (not scaled). \n:::\n\nHere, we choose not to regress out either of them. Because we are looking at developing cells, we might be interested to keep cycling cells seperated. In addition, the G2/M and S phases seem to be in the same clusters. More info on correcting for cell cycling [here](https://satijalab.org/seurat/articles/cell_cycle_vignette.html). \n\n### Cell type annotation using `SingleR`\n\nTo do a fully automated annoation, we need a reference dataset of primary cells. Any reference could be used. The package `scRNAseq` in Bioconductor includes several scRNAseq datasets that can be used as reference to `SingleR`. One could also use a reference made of bulk RNA seq data. Here we are using the a hematopoietic reference dataset from `celldex`. Check out what's in there:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nref <- celldex::NovershternHematopoieticData()\nclass(ref)\ntable(ref$label.main)\n```\n:::\n\n\n\n\n::: {.callout-note}\nYou will be asked whether to create the directory `/home/rstudio/.cache/R/ExperimentHub`. Type `yes` as a response. \n:::\n\n::: {.callout-note}\nYou can find more information on different reference datasets at the [`celldex` documentation](https://bioconductor.org/packages/3.14/data/experiment/vignettes/celldex/inst/doc/userguide.html)\n:::\n\nNow `SingleR` compares our normalized count data to a reference set, and finds the most probable annation:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nseu_SingleR <- SingleR::SingleR(test = Seurat::GetAssayData(seu),\n                                ref = ref,\n                                labels = ref$label.main)\n```\n:::\n\n\n\n\nSee what's in there by using `head`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(seu_SingleR)\n```\n:::\n\n\n\n\nVisualize singleR score quality scores:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nSingleR::plotScoreHeatmap(seu_SingleR)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nSingleR::plotDeltaDistribution(seu_SingleR)\n```\n:::\n\n\n\n\nThere are some annotations that contain only a few cells. They are usually not of interest, and they clogg our plots. Therefore we remove them from the annotation:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsingleR_labels <- seu_SingleR$labels\nt <- table(singleR_labels)\nother <- names(t)[t < 10]\nsingleR_labels[singleR_labels %in% other] <- \"none\"\n```\n:::\n\n\n\n\nIn order to visualize it in our UMAP, we have to add the annotation to `seu@meta.data`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nseu$SingleR_annot <- singleR_labels\n```\n:::\n\n\n\n\nWe can plot the annotations in the UMAP. Here, we use a different package for plotting (`dittoSeq`) as it has a bit better default coloring, and some other plotting functionality we will use later on.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndittoSeq::dittoDimPlot(seu, \"SingleR_annot\", size = 0.7)\n```\n:::\n\n\n\n\nWe can check out how many cells per sample we have for each annotated cell type:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndittoSeq::dittoBarPlot(seu, var = \"SingleR_annot\", group.by = \"orig.ident\")\n```\n:::\n\n\n\n\n::: {.callout-important}\n## Exercise\nCompare our manual annotation (based on the set of T cell genes) to the annotation with `SingleR`. Do they correspond?\n:::\n\n::: {.callout-hint}\nYou can for example use the plotting function `dittoBarPlot` to visualize the cell types according to cluster (use `RNA_snn_res.0.3` in stead of `orig.ident`))\n:::\n\n::: {.callout-tip collapse=\"true\"}\n## Answer\nWe can have a look at the mean module score for each `SingleR` annotation like this:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndittoSeq::dittoBarPlot(seu, \n                       var = \"SingleR_annot\", \n                       group.by = \"RNA_snn_res.0.3\")\n```\n:::\n\n\n\n\nHere, you can see that cluster 0 and 8 contain cells annotated as T cells (CD4+ and CD8+).\n\n:::\n\n### Save the dataset and clear environment\n\nNow, save the dataset so you can use it tomorrow:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsaveRDS(seu, \"day3/seu_day3-1.rds\")\n```\n:::\n\n\n\n\nClear your environment:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrm(list = ls())\ngc()\n.rs.restartR()\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}